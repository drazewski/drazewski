{
    "componentChunkName": "component---src-templates-blog-js",
    "path": "/blog/custom-react-hooks-usemodal",
    "result": {"data":{"contentfulBlogPosts":{"date":"Sep 07, 2021","title":"Custom React hooks: useModal","content":{"raw":"{\"nodeType\":\"document\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Life has become much simpler since hooks were introduced in React (v16.8). For many developers, class components are forgotten, and managing the state or side effects of (functional) components has become much easier and more enjoyable. In addition to the Standard Hooks such as \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"useState\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" and \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"useEffect\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\", we have another great option - to create our own Custom Hooks.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"hr\",\"content\":[],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"This is how I wanted to start a series of articles in which I will describe a few of these custom hooks that I have created and regularly use on various projects. They are quite universal, so I hope they will be useful to you as well. I start the series with a very simple and probably used by many of you Hook to manage the display of modals:\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-2\",\"content\":[{\"nodeType\":\"text\",\"value\":\"useModal\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Popular UI libraries used in React such as \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Ant Design\",\"marks\":[],\"data\":{}}],\"data\":{\"uri\":\"https://ant.design/components/modal/\"}},{\"nodeType\":\"text\",\"value\":\", \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"content\":[{\"nodeType\":\"text\",\"value\":\"React Bootstrap\",\"marks\":[],\"data\":{}}],\"data\":{\"uri\":\"https://react-bootstrap.github.io/components/modal/\"}},{\"nodeType\":\"text\",\"value\":\" or \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Material UI\",\"marks\":[],\"data\":{}}],\"data\":{\"uri\":\"https://material-ui.com/components/dialogs/\"}},{\"nodeType\":\"text\",\"value\":\" have \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Modal\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" or \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Dialog\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" component. A modal is nothing more than a pop-up window requiring user interaction (or not) displaying some information. An example of such a modal can be a window in which the application asks you to confirm that you want to log out, delete something, or simply inform the user about an error. \",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Using the Modal Component, which is taken directly from the React-Bootrstrap documentation, is as follows:\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"embedded-entry-block\",\"content\":[],\"data\":{\"target\":{\"sys\":{\"id\":\"6FdXMLwML9RDBp4AV4pR6m\",\"type\":\"Link\",\"linkType\":\"Entry\"}}}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"These types of components are usually used many times in various places of the application. So why not make one reusable component that will take parameters such as: title, content, button names and actions? Great, let's create a component like this and call it \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"ModalContainer\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\". It will accept the props necessary to display Modal, all texts and the submit button action. Let's assume that the only action after clicking the Cancel button is to close the Modal.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"embedded-entry-block\",\"content\":[],\"data\":{\"target\":{\"sys\":{\"id\":\"1fvWAMxC1ESJfc312Oiz5h\",\"type\":\"Link\",\"linkType\":\"Entry\"}}}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"And that's great, now we can easily reuse this component in other components just by passing necessary props.\\nHowever, when I added several such components in different places, sometimes even several times in one component, I decided to separate a \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"special function\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" that would be responsible for displaying Modal. This function will return two values: \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"setModal\",\"marks\":[{\"type\":\"italic\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" - that is a function that allows us to set modal's content, and \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"modalComponent\",\"marks\":[{\"type\":\"italic\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" - ready modal component to display. This will be our \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"useModal hook\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\".\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"embedded-entry-block\",\"content\":[],\"data\":{\"target\":{\"sys\":{\"id\":\"5idwZG6nKSWcy9KACMwHeh\",\"type\":\"Link\",\"linkType\":\"Entry\"}}}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Using such a hook will be very simple.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"embedded-entry-block\",\"content\":[],\"data\":{\"target\":{\"sys\":{\"id\":\"49gf3KKcaH6B8YYNER5Qe8\",\"type\":\"Link\",\"linkType\":\"Entry\"}}}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"As you may have noticed, I added one more props to pass in addition to the content. This is the size that is passed through the hook to the Modal component. The Bootstrap Modal can have three size values: \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"'sm' | 'lg' | 'xl'\",\"marks\":[{\"type\":\"code\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" . \",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Proper use of this Hook requires that each time we need to render the returned \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"modalComponent\",\"marks\":[{\"type\":\"italic\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\". Importantly, however, if we wanted to use several different modals in one component, we only need to use one \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"modalComponent\",\"marks\":[{\"type\":\"italic\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\".\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"embedded-entry-block\",\"content\":[],\"data\":{\"target\":{\"sys\":{\"id\":\"1FFFWeU7b0uTknvcHN7p0Q\",\"type\":\"Link\",\"linkType\":\"Entry\"}}}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"And here you can see how it works in practice: \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"content\":[{\"nodeType\":\"text\",\"value\":\"useModal on Codepen\",\"marks\":[],\"data\":{}}],\"data\":{\"uri\":\"https://codepen.io/drazewski/pen/powRmrB\"}},{\"nodeType\":\"text\",\"value\":\"\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"embedded-entry-block\",\"content\":[],\"data\":{\"target\":{\"sys\":{\"id\":\"6cA8tPdt9VwHoJEs2W5X0I\",\"type\":\"Link\",\"linkType\":\"Entry\"}}}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"hr\",\"content\":[],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"I hope that the above example of this cutom hook will be useful to someone in everyday work with React. If you see other possibilities for creating such a Hook, or writing it otherwise, please write in the comment below.\",\"marks\":[],\"data\":{}}],\"data\":{}}]}","references":[{"contentful_id":"6FdXMLwML9RDBp4AV4pR6m","__typename":"ContentfulCodeBlock","description":"Show modal without hook","language":"javascript","code":{"code":"import React, { useState } from \"react\";\nimport {\n    Card, \n    Button,\n    Row,\n    Modal,\n} from \"react-bootstrap\";\n\nconst TestComponent = () => {\n  const [ isModal, setIsModal ] = useState();\n\n  const handleShowModal = () => setIsModal(true);\n\n  return (\n    <>\n      <Row className=\"justify-content-md-center\">\n        <Card body>\n            <h2>Click here:</h2>\n            <Button onClick={handleShowModal}>\n              open modal\n            </Button>\n        </Card>\n      </Row>\n      <Modal show={isModal} backdrop=\"static\" keyboard={false}>\n        <Modal.Header>\n        <Modal.Title>Modal title</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>Hello world ???</Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={() => setIsModal(false)}>Cancel</Button>\n          <Button variant=\"primary\" >OK</Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  )\n}\n\nexport default TestComponent;\n"}},{"contentful_id":"1fvWAMxC1ESJfc312Oiz5h","__typename":"ContentfulCodeBlock","description":"ModalContainer component","language":"javascript","code":{"code":"import { Button, Modal } from \"react-bootstrap\";\n\nconst ModalContainer = ({\n  title, body, showCancelButton, confirmButtonText, confirmButtonAction, show, hideModal  \n}) => {\n  return (\n    <Modal show={show} backdrop=\"static\" keyboard={false}>\n      <Modal.Header>\n      <Modal.Title>{title}</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>{body}</Modal.Body>\n      <Modal.Footer>\n        {showCancelButton &&\n          <Button variant=\"secondary\" onClick={hideModal}>Cancel</Button>\n        }\n          <Button variant=\"primary\" onClick={confirmButtonAction}>{confirmButtonText}</Button>\n      </Modal.Footer>\n    </Modal>\n  )\n}"}},{"contentful_id":"5idwZG6nKSWcy9KACMwHeh","__typename":"ContentfulCodeBlock","description":"useModal hook","language":"javascript","code":{"code":"export const useModal = () => {\n  const [isModal, setIsModal] = useState(false);\n  const [modalContent, setModalContent] = useState();\n  const [modalComponent, setModalComponent] = useState();\n  const [modalSize, setModalSize] = useState();\n\n  const hideModal = () => {\n    setIsModal(false);\n  }\n\n  const setModal = (content, size) => {\n    if (!content) {\n      setIsModal(false);\n      setModalContent(null);\n    } else {\n      setIsModal(true);\n      setModalContent(content);\n      if (size) setModalSize(size);\n    }\n  };\n\n  useEffect(() => {\n    if (modalContent) {\n      const {title, body, confirmButtonAction, confirmButtonText} = modalContent;\n\n      setModalComponent(\n        <ModalContainer\n          size={modalSize}\n          title={title}\n          body={body}\n          showCancelButton\n          confirmButtonText={confirmButtonText}\n          confirmButtonAction={confirmButtonAction}\n          show={isModal}\n          hideModal={hideModal}\n        />\n      );\n    }\n  }, [modalContent, isModal]);\n\n  return { setModal, modalComponent };\n};"}},{"contentful_id":"49gf3KKcaH6B8YYNER5Qe8","__typename":"ContentfulCodeBlock","description":"Component with useModal hook","language":"javascript","code":{"code":"const TestComponent = () => {\n  const { setModal, modalComponent }  = useModal();\n\n  const handleShowModal = () => setModal(\n    {\n      title: 'Modal title',\n      body: 'Modal body',\n      confirmButtonAction: () => console.log('action!'),\n      confirmButtonText: 'OK',\n    },'sm'\n  );\n\n  return (\n    <>\n      <Row className=\"justify-content-md-center\">\n        <Card body>\n            <h2>Click here:</h2>\n            <Button onClick={handleShowModal}>\n              open modal\n            </Button>\n        </Card>\n      </Row>\n      {modalComponent}\n    </>\n  )\n}"}},{"contentful_id":"1FFFWeU7b0uTknvcHN7p0Q","__typename":"ContentfulCodeBlock","description":"component with useModal and two modals","language":"javascript","code":{"code":"const TestComponent = () => {\n  const { setModal, modalComponent }  = useModal();\n\n  const handleShowModal = () => setModal(\n    {\n      title: 'Modal title',\n      body: 'Modal body',\n      confirmButtonAction: () => console.log('action!'),\n      confirmButtonText: 'OK',\n    },'sm'\n  );\n\n  const handleShowAnotherModal = () => setModal(\n    {\n      title: 'Another Modal title',\n      body: 'Another Modal body',\n      confirmButtonAction: () => {},\n      confirmButtonText: 'Submit',\n    },'lg'\n  );\n\n  return (\n    <>\n      <Row className=\"justify-content-md-center\">\n        <Card body>\n            <h2>Click here:</h2>\n            <Button onClick={handleShowModal}>\n              open modal\n            </Button>\n            <Button onClick={handleShowAnotherModal}>\n              open another modal\n            </Button>\n        </Card>\n      </Row>\n      {modalComponent}\n    </>\n  )\n}"}},{"contentful_id":"6cA8tPdt9VwHoJEs2W5X0I","__typename":"ContentfulScripts","scriptTag":{"scriptTag":" https://cpwebassets.codepen.io/assets/embed/ei.js"},"htmlTag":{"htmlTag":"<p class=\"codepen\" data-height=\"300\" data-default-tab=\"html,result\" data-slug-hash=\"powRmrB\" data-user=\"drazewski\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/drazewski/pen/powRmrB\">\n  modal</a> by drazewski (<a href=\"https://codepen.io/drazewski\">@drazewski</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>"}}]},"featuredImage":{"fluid":{"srcSet":"//images.ctfassets.net/r1q8fbx9u30m/4uB5KyWRuamERu2XbEKvpg/deba4f85f0cbfc26c2b5f8fb7eecdcb0/marseille-1233746_1920.jpg?w=200&h=133&q=50 200w,\n//images.ctfassets.net/r1q8fbx9u30m/4uB5KyWRuamERu2XbEKvpg/deba4f85f0cbfc26c2b5f8fb7eecdcb0/marseille-1233746_1920.jpg?w=400&h=266&q=50 400w,\n//images.ctfassets.net/r1q8fbx9u30m/4uB5KyWRuamERu2XbEKvpg/deba4f85f0cbfc26c2b5f8fb7eecdcb0/marseille-1233746_1920.jpg?w=800&h=531&q=50 800w,\n//images.ctfassets.net/r1q8fbx9u30m/4uB5KyWRuamERu2XbEKvpg/deba4f85f0cbfc26c2b5f8fb7eecdcb0/marseille-1233746_1920.jpg?w=1200&h=797&q=50 1200w,\n//images.ctfassets.net/r1q8fbx9u30m/4uB5KyWRuamERu2XbEKvpg/deba4f85f0cbfc26c2b5f8fb7eecdcb0/marseille-1233746_1920.jpg?w=1600&h=1063&q=50 1600w,\n//images.ctfassets.net/r1q8fbx9u30m/4uB5KyWRuamERu2XbEKvpg/deba4f85f0cbfc26c2b5f8fb7eecdcb0/marseille-1233746_1920.jpg?w=1920&h=1275&q=50 1920w"}}}},"pageContext":{"slug":"custom-react-hooks-usemodal"}},
    "staticQueryHashes": ["2236985993","2543130515","63159454"]}