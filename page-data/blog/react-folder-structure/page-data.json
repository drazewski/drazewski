{
    "componentChunkName": "component---src-templates-blog-js",
    "path": "/blog/react-folder-structure",
    "result": {"data":{"contentfulBlogPosts":{"date":"Oct 10, 2021","title":"React folder structure","content":{"raw":"{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Although I have successfully completed several React projects, I still do not have one the best directory structure. I think this is mainly because:\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"React and its ecosystem are constantly evolving.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"list-item\"},{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Each team has people with different backgrounds.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"list-item\"},{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Every application is different (yeah, I know, it's so obvious).\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"list-item\"}],\"nodeType\":\"ordered-list\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Therefore, I think there is such a thing as a perfect directory or file structure in a React application. Anyway, a very important sentence on this topic can also be found in \",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://reactjs.org/docs/faq-structure.html\"},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"the official React documentation\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\":\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"italic\"}],\"value\":\"If you’re just starting a project, don’t spend more than five minutes on choosing a file structure. Pick any of the above approaches (or come up with your own) and start writing code! You’ll likely want to rethink it anyway after you’ve written some real code.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"blockquote\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"However, looking through all my completed React projects, I can see that they have several common parts. Maybe for most of you they will be quite obvious but I'll list them below as they might help someone start their own React project.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Grouping by file type\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"This is one of the approaches that the React documentation mentions, and it certainly works best for me.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"In this approach, we assume that the main elements of the application have their parent folders. And so, almost for sure, separate folders will have files such as:\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"components\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"list-item\"},{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"pages (Next.js, Gatsby), views, scenes or containers\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"list-item\"},{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"services\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"list-item\"},{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"assets\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"list-item\"},{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"interfaces or types (when using TS)\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"list-item\"},{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"utilities\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"list-item\"}],\"nodeType\":\"unordered-list\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Components\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Components are the basic elements from which applications in React are built. Personally, I prefer to start projects from one folder, common to all components. However, it is important that each component should have its own separate folder, as in the example below.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{\"target\":{\"sys\":{\"id\":\"465NrXpPRbdmCGyK0C0a3u\",\"type\":\"Link\",\"linkType\":\"Asset\"}}},\"content\":[],\"nodeType\":\"embedded-asset-block\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Each folder should contain files related only to a given component. Let's take, for example, the \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"Header\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\" component. Inside the \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"code\"}],\"value\":\"Button\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\" folder, we should keep files such as:\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"italic\"}],\"value\":\"Header.tsx\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\" (component file)\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"list-item\"},{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"italic\"}],\"value\":\"Header.test.tsx\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\" (component test file)\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"list-item\"},{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"italic\"}],\"value\":\"index.ts\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\" (optionally, a file to export the default component from the folder)\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"list-item\"}],\"nodeType\":\"unordered-list\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Using one folder for component I like to build components according to \",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://formidable.com/blog/2021/react-composition/\"},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Composition Pattern\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\". If I can break my component into smaller elements, then if they are only used by this one main component, I keep them together in one directory. Look at the example:\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{\"target\":{\"sys\":{\"id\":\"2XalhopC9pVORgTGSamRlc\",\"type\":\"Link\",\"linkType\":\"Asset\"}}},\"content\":[],\"nodeType\":\"embedded-asset-block\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"There is one more benefit of keeping components in separate folders. If their number becomes large and it is difficult for us to find the desired component, then we can use additional nesting of folders, e.g. by dividing them according to their type, functionality or their size. An example here can be the \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"Atomic Design System\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\", according to which components can be divided into: \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"italic\"}],\"value\":\"atoms\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\", \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"italic\"}],\"value\":\"molecules\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\", \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"italic\"}],\"value\":\"organisms\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\", \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"italic\"}],\"value\":\"templates \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\"and \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"italic\"}],\"value\":\"pages\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\". Of course, this division can be arbitrary and sometimes it is fair enough to divide the components into elements (single components) and modules (components build with multiple elements).\\n\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Pages\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"By pages, I mean those files that are directly related to route based on its filename, so each route in the application has its own page. This approach is used in \",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://nextjs.org/docs/basic-features/pages\"},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"Next.js\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\" applications. These files are of course nothing more than components that often combine the responsibility for applying the appropriate layout and fetching the data. Sometimes different names are used for pages: views, scenes or containers. Personally I prefer using pages or views. \",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Since pages usually have a similar layout, i.e. they use the same main elements as the header or footer, have specific widths, colors and other details, instead of duplicating them on each page, I like to create layout components. I store layout components in the \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"code\"}],\"value\":\"Layouts\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\" folder. These components are responsible only for the UI and wrap the content displayed on the page supplementing it with the necessary elements. Maybe this example below is a bit naive, but roughly that's what it's all about:\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{\"target\":{\"sys\":{\"id\":\"3qcJJ5gNQPFBBJ8FkRgkLE\",\"type\":\"Link\",\"linkType\":\"Asset\"}}},\"content\":[],\"nodeType\":\"embedded-asset-block\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Services\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"It seems obvious that it is good to keep all the methods responsible for fetching data from various sources in separate files, let's call them services, so they can be easily reused in different parts of the application. In the services folder I try to keep everything related to communication with the outside. But not only. Often there are services with different handlers for various types of files (e.g. json files) or pictures. Below I will show an example of services folder in one of my projects.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{\"target\":{\"sys\":{\"id\":\"6PjoHR15WXrwkcpO8JvEYB\",\"type\":\"Link\",\"linkType\":\"Asset\"}}},\"content\":[],\"nodeType\":\"embedded-asset-block\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Assets\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"This one is easy. In React best practices we always keep an assets folder inside the \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"code\"}],\"value\":\"src\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\" which may contain images, icons and font files.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Interfaces\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"When using \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"typescript\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\", it seems necessary to have one place to hold all defined interfaces or new types created. It is often convenient to keep them directly where they are used, however, as they are often reused in different places, we should consider having a separate space for types and interfaces. Hence, whenever I write in typescript, I have one interfaces directory, where I collect all files of this type.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Utilities\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Sooner or later we will need space for various additional elements such as helper functions, custom hooks, configuration files or enums (typescript). Personally, I like to have one place where I keep such additional things. Sometimes it's called \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"code\"}],\"value\":\"utilities\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\", sometimes \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"code\"}],\"value\":\"shared\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\" or \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"code\"}],\"value\":\"commons\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\". Of course, inside such a directory I do not throw everything as it goes, but I divide it into smaller directories. Thanks to this, I get a place that allows me to have a\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"italic\"}],\"value\":\" little mess\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\". But at least I know that this is the place, and I often refactor it while working. \",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Anyway, I think that this is one of the most important things when working with a React application - we can never close ourselves to changes in the directory structure. We should not assume that it will be perfect from the very beginning. Remember that it usually develops during the project and this is something natural.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[],\"nodeType\":\"hr\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"In addition to the directories listed above, you will probably need those related to state management, e.g. with reducers and actions (if you are using \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"Redux\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\"), or stores (if you are using \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"MobX\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\") or for handling the global context.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"If your application will be based on routing, you may also need a separate folder in which you will keep the entire routing configuration as well as grouped routes. \",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Finally, keep in mind what is written in the \",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://reactjs.org/docs/faq-structure.html\"},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"React documentation\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\":\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Don't overthink it\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"blockquote\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"The final directory structure always evolves over the project and you shouldn't assume that you will do it right from the very beginning.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"document\"}","references":[{"contentful_id":"465NrXpPRbdmCGyK0C0a3u","__typename":"ContentfulAsset","id":"24a469ef-d4dc-510e-93c8-68b0c9f99a2d"},{"contentful_id":"2XalhopC9pVORgTGSamRlc","__typename":"ContentfulAsset","id":"e878e552-f456-561f-afd1-0ced75f7f4f4"},{"contentful_id":"3qcJJ5gNQPFBBJ8FkRgkLE","__typename":"ContentfulAsset","id":"b10292fd-fb9f-58bd-8547-0910fffd97f3"},{"contentful_id":"6PjoHR15WXrwkcpO8JvEYB","__typename":"ContentfulAsset","id":"f8614d5c-ef0d-5538-8040-e890af238164"}]},"featuredImage":{"fluid":{"srcSet":"//images.ctfassets.net/r1q8fbx9u30m/34WMghJ5MyPxXMKSyybU2s/fd65a21aed9fdd0f6844e3b6f53ce237/files-3163060_1920.jpg?w=200&h=133&q=50 200w,\n//images.ctfassets.net/r1q8fbx9u30m/34WMghJ5MyPxXMKSyybU2s/fd65a21aed9fdd0f6844e3b6f53ce237/files-3163060_1920.jpg?w=400&h=266&q=50 400w,\n//images.ctfassets.net/r1q8fbx9u30m/34WMghJ5MyPxXMKSyybU2s/fd65a21aed9fdd0f6844e3b6f53ce237/files-3163060_1920.jpg?w=800&h=532&q=50 800w,\n//images.ctfassets.net/r1q8fbx9u30m/34WMghJ5MyPxXMKSyybU2s/fd65a21aed9fdd0f6844e3b6f53ce237/files-3163060_1920.jpg?w=1200&h=798&q=50 1200w,\n//images.ctfassets.net/r1q8fbx9u30m/34WMghJ5MyPxXMKSyybU2s/fd65a21aed9fdd0f6844e3b6f53ce237/files-3163060_1920.jpg?w=1600&h=1064&q=50 1600w,\n//images.ctfassets.net/r1q8fbx9u30m/34WMghJ5MyPxXMKSyybU2s/fd65a21aed9fdd0f6844e3b6f53ce237/files-3163060_1920.jpg?w=1920&h=1277&q=50 1920w"}}}},"pageContext":{"slug":"react-folder-structure"}},
    "staticQueryHashes": ["2236985993","2543130515","63159454"]}