{"data":{"allContentfulBlogPosts":{"edges":[{"node":{"date":"Sep 07, 2021","slug":"custom-react-hooks-usemodal","title":"Custom React hooks: useModal","content":{"raw":"{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Life has become much simpler since hooks were introduced in React (v16.8). For many developers, class components are forgotten, and managing the state or side effects of (functional) components has become much easier and more enjoyable. In addition to the Standard Hooks such as \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"useState\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\" and \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"useEffect\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\", we have another great option - to create our own Custom Hooks.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[],\"nodeType\":\"hr\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"This is how I wanted to start a series of articles in which I will describe a few of these custom hooks that I have created and regularly use on various projects. They are quite universal, so I hope they will be useful to you as well. I start the series with a very simple and probably used by many of you Hook to manage the display of modals:\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"useModal\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Popular UI libraries used in React such as \",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://ant.design/components/modal/\"},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Ant Design\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\", \",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://react-bootstrap.github.io/components/modal/\"},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"React Bootstrap\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\" or \",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://material-ui.com/components/dialogs/\"},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Material UI\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\" have \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"Modal\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\" or \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"Dialog\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\" component. A modal is nothing more than a pop-up window requiring user interaction (or not) displaying some information. An example of such a modal can be a window in which the application asks you to confirm that you want to log out, delete something, or simply inform the user about an error. \",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Using the Modal Component, which is taken directly from the React-Bootrstrap documentation, is as follows:\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{\"target\":{\"sys\":{\"id\":\"6FdXMLwML9RDBp4AV4pR6m\",\"type\":\"Link\",\"linkType\":\"Entry\"}}},\"content\":[],\"nodeType\":\"embedded-entry-block\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"These types of components are usually used many times in various places of the application. So why not make one reusable component that will take parameters such as: title, content, button names and actions? Great, let's create a component like this and call it \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"ModalContainer\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\". It will accept the props necessary to display Modal, all texts and the submit button action. Let's assume that the only action after clicking the Cancel button is to close the Modal.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{\"target\":{\"sys\":{\"id\":\"1fvWAMxC1ESJfc312Oiz5h\",\"type\":\"Link\",\"linkType\":\"Entry\"}}},\"content\":[],\"nodeType\":\"embedded-entry-block\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"And that's great, now we can easily reuse this component in other components just by passing necessary props.\\nHowever, when I added several such components in different places, sometimes even several times in one component, I decided to separate a \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"special function\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\" that would be responsible for displaying Modal. This function will return two values: \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"italic\"}],\"value\":\"setModal\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\" - that is a function that allows us to set modal's content, and \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"italic\"}],\"value\":\"modalComponent\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\" - ready modal component to display. This will be our \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"useModal hook\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\".\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{\"target\":{\"sys\":{\"id\":\"5idwZG6nKSWcy9KACMwHeh\",\"type\":\"Link\",\"linkType\":\"Entry\"}}},\"content\":[],\"nodeType\":\"embedded-entry-block\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Using such a hook will be very simple.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{\"target\":{\"sys\":{\"id\":\"49gf3KKcaH6B8YYNER5Qe8\",\"type\":\"Link\",\"linkType\":\"Entry\"}}},\"content\":[],\"nodeType\":\"embedded-entry-block\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"As you may have noticed, I added one more props to pass in addition to the content. This is the size that is passed through the hook to the Modal component. The Bootstrap Modal can have three size values: \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"code\"}],\"value\":\"'sm' | 'lg' | 'xl'\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\" . \",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Proper use of this Hook requires that each time we need to render the returned \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"italic\"}],\"value\":\"modalComponent\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\". Importantly, however, if we wanted to use several different modals in one component, we only need to use one \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"italic\"}],\"value\":\"modalComponent\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\".\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{\"target\":{\"sys\":{\"id\":\"1FFFWeU7b0uTknvcHN7p0Q\",\"type\":\"Link\",\"linkType\":\"Entry\"}}},\"content\":[],\"nodeType\":\"embedded-entry-block\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"And here you can see how it works in practice: \",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://codepen.io/drazewski/pen/powRmrB\"},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"useModal on Codepen\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{\"target\":{\"sys\":{\"id\":\"6cA8tPdt9VwHoJEs2W5X0I\",\"type\":\"Link\",\"linkType\":\"Entry\"}}},\"content\":[],\"nodeType\":\"embedded-entry-block\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[],\"nodeType\":\"hr\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"I hope that the above example of this cutom hook will be useful to someone in everyday work with React. If you see other possibilities for creating such a Hook, or writing it otherwise, please write in the comment below.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"document\"}"},"featuredImage":{"fixed":{"src":"//images.ctfassets.net/r1q8fbx9u30m/4uB5KyWRuamERu2XbEKvpg/deba4f85f0cbfc26c2b5f8fb7eecdcb0/marseille-1233746_1920.jpg?w=300&q=50"}}}},{"node":{"date":"Sep 30, 2021","slug":"how-to-use-let-and-const","title":"Let and const - how to use them","content":{"raw":"{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"JS variables\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"There are three ways in JavaScript that one can declare a variable - \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"var\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\", \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"let\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\", and \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"const\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\". Before ECMAScript 2015 (ES6), we only had \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"code\"}],\"value\":\"var\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\" declarations. Variables declared with \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"code\"}],\"value\":\"var\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\" do not support block-level scope but are limited to function scope. It means that if a variable is declared with \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"code\"}],\"value\":\"var\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\" in a loop or a block is also available outside the loop or if block. This is because they are hoisted.\\nVariables declared with the \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"code\"}],\"value\":\"var\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\" keyword always have a function scope, which means that they recognize functions as having a separate scope. Therefore, this local scope variable is not available with global scope.\\nLet's see two examples:\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{\"target\":{\"sys\":{\"id\":\"liJobEKs8AFJ2q2VCIoZN\",\"type\":\"Link\",\"linkType\":\"Entry\"}}},\"content\":[],\"nodeType\":\"embedded-entry-block\"},{\"data\":{\"target\":{\"sys\":{\"id\":\"4IIQEzssMCpFLcdvUwmEH\",\"type\":\"Link\",\"linkType\":\"Entry\"}}},\"content\":[],\"nodeType\":\"embedded-entry-block\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Let and const\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"In ES6 we got two new ways to declare variables: \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"let\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\" and \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"const\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\". \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"code\"}],\"value\":\"Let\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\" and \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"code\"}],\"value\":\"const\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\" differ significantly from the var declaration. First of all, they have a block, not a global scope, and they are not hoisted either. So let's see what the situation will look like for a \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"code\"}],\"value\":\"let\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\" variable, for the example above:\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{\"target\":{\"sys\":{\"id\":\"VTJ4tc256wrWArXHEoAPc\",\"type\":\"Link\",\"linkType\":\"Entry\"}}},\"content\":[],\"nodeType\":\"embedded-entry-block\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"As you can see variable declared with \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"code\"}],\"value\":\"let\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\" is only available inside \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"code\"}],\"value\":\"if(){ ... }\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\" \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\"block and only after its declaration, not before. \",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Another important feature that distinguishes var from \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"code\"}],\"value\":\"const\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\" and \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"code\"}],\"value\":\"let\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\" is that it could be redeclared and \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"code\"}],\"value\":\"const\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\" and \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"code\"}],\"value\":\"let\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\" could not. The only difference between \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"code\"}],\"value\":\"const\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\" and \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"code\"}],\"value\":\"let\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\" is that one assigned value to a variable using const can not be reassigned with a new value. \",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"And that's basically all you need to know about \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"code\"}],\"value\":\"const\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\" and \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"code\"}],\"value\":\"let\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\" variables. However, there are times when we want to use both types of variables and this is where problems sometimes arise.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Mix let and const when destructing\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"Destructuring\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\" is a convenient way to extract multiple values from data stored in (possibly nested) objects and arrays and it can be used in locations that receive data (such as the left-hand side of an assignment).\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"I remember one interesting case when I was still a very novice javascript developer related to mixing \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"code\"}],\"value\":\"let\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\" nad \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"code\"}],\"value\":\"const\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\" declarations. I wanted to use \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"code\"}],\"value\":\"let\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\" instead of \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"code\"}],\"value\":\"const\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\", but \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"italic\"}],\"value\":\"eslint\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\" was throwing me the error: \",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"\\\"\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"italic\"}],\"value\":\"use const because this variable is never reassigned\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\".\\\"\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"This is because \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"code\"}],\"value\":\"let\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\" assumes that the variable value will be changed at some point of execution but it was not happening for some of these variables in my code.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"In fact, I wanted to use \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"code\"}],\"value\":\"const\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\" for some elements and \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"code\"}],\"value\":\"let\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\" for others. Then, thanks to the kindness of a more experienced developer colleague, I got to know a method called \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"elision\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\". Elision allows you to use the \\\"holes\\\" syntax to omit array elements from destructuring:\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{\"target\":{\"sys\":{\"id\":\"OnLqRrbv0FbmyrCBN0uyY\",\"type\":\"Link\",\"linkType\":\"Entry\"}}},\"content\":[],\"nodeType\":\"embedded-entry-block\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"If more than one trailing comma is used, an \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"bold\"},{\"type\":\"italic\"}],\"value\":\"elision\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"italic\"}],\"value\":\" \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\"(or hole) is produced. An array with holes is called \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"italic\"}],\"value\":\"sparse\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\" (a \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"italic\"}],\"value\":\"dense\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\" array has no holes). \",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"There is one more very interesting way to solve the above problem. As you probably know, almost everything is an object in javascript. Certainly, arrays are also objects. Therefore, the destructuring example above can be written as follows:\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{\"target\":{\"sys\":{\"id\":\"7H7ZVp8cZ9pe0C0DNERsQp\",\"type\":\"Link\",\"linkType\":\"Entry\"}}},\"content\":[],\"nodeType\":\"embedded-entry-block\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"In general, the topic of destructuring in js is amazingly interesting and should be known by all developers working in this language. To all interested, I highly recommend a great source of knowledge with examples: \",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://exploringjs.com/es6/ch_destructuring.html#sec_more-array-destructuring\"},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Exploringjs.com\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\".\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"document\"}"},"featuredImage":{"fixed":{"src":"//images.ctfassets.net/r1q8fbx9u30m/NKmKm4jeR3fYS6c1ACCn6/cb9b5fd25d0fe61797565b70c39f137b/owls-g38d02993f_1920.jpg?w=300&q=50"}}}},{"node":{"date":"Aug 20, 2021","slug":"completely-new-website-and-seo","title":"Completely new website and SEO","content":{"raw":"{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Good SEO without promotion?\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"I know that the title above sounds a bit controversial because rather all experts on brand building and SEO exactly know that without social media, links, or proper advertising with Google Ads, it is difficult to get a really good position in the search results. However, as is well known, the final position of our pages in the browser is influenced by a huge number of different factors. These are, among others: the quality of the website, performance, the appropriate use of HTML tags, the content - its quantity and uniqueness, and much much more, of course.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"I'll build a webpage for myself\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Until now, working as a frontend developer, I mainly built websites for other people. However, this finally has changed this year. I decided to start my private projects. Projects, thanks to which I will not only be able to learn about new tools for creating pages (yeah, for this blog I decided to use \",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://www.gatsbyjs.com/\"},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Gatsby.js\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\", for the one I am about to tell you about, I used \",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://nextjs.org/\"},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Next.js\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\") but first of all l will be able to \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"underline\"}],\"value\":\"check in practice how Google starts positioning new websites\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\". Which pages are better and worse positioned and what is the pace of positioning. \",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"I started my first project six months ago. This is a thematic side - a hobby one, dealing with a niche topic, which I was interested in quite a lot in the past but maybe a little less recently. However, I do not want to tell you now the exact topic of the page. It is not really important. \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"underline\"}],\"value\":\"Let's focus on statistics and SEO \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\"😎.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"I am very curious about how my content will be perceived by indexing robots. The main content is to be articles written with all SEO principles: with \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"headlines, photos, and links, both internal and external\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\". In addition to the articles, the website will contain an extensive catalog, which will include a large number of automatically generated subpages, but without a large amount of content. Initially, I planned to write one article a week, but in practice, I found it difficult to write once every two weeks 🤓.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Website traffic monitoring\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"In order to start the adventure with analyzing traffic on the website, I had to say \\\"\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"underline\"}],\"value\":\"Hi Google, I'm here\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\"\\\". For this purpose, I used the \",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://search.google.com/\"},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Google Search Console\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\" tool. I am not going to describe this tool and its possibilities at the moment, but in a nutshell, it is used to speed up the page indexing process and monitor the \\\"condition\\\" of the website.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"The most frequently reviewed charts in Search Console are Performance and Coverage. In the Performance section, I see two of the most interesting indicators: \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"Total Impressions\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\" and \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"Total Clicks\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\".\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{\"target\":{\"sys\":{\"id\":\"7HuMN3uYq6PbqqWqNdMjwb\",\"type\":\"Link\",\"linkType\":\"Asset\"}}},\"content\":[],\"nodeType\":\"embedded-asset-block\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Here's what the results of my site are currently looking like. There is a clear increase in both indicators, so the trend seems to be promising. However, the growth rate is quite slow.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Let's see how my website coverage is currently based on data from Google Search Console.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{\"target\":{\"sys\":{\"id\":\"2lTX2ae9lEqhyDc3QvzgYC\",\"type\":\"Link\",\"linkType\":\"Asset\"}}},\"content\":[],\"nodeType\":\"embedded-asset-block\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Of course, I must add here that from the very beginning I generate a sitemap for the site and send it to Google via Search Console. You may be surprised to see such a large number of pages, but as I wrote before several hundred pages are automatically generated pages almost without a content. It is interesting, however, that despite submitting the complete site map to Google, most pages have not been indexed so far.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Since I do not promote my website anywhere, I do not expect to have visits from outside the search engine at the moment. The analysis of data from Google Analytics confirms my assumptions. 90% of entries are organic traffic and 10% are referral and not-set (I suspect these are mine). The most visited page is the home page. However, the largest number of direct entries from the search engine goes to other pages, mainly to those with long content and the largest number of original phrases, words and unique names. So it is natural that after hitting a page of an article, the next page chosen by users is the home page.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"First conclusions\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Do not copy the texts\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-4\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"A few years ago, I was writing some articles for my association's website. So far, these texts, or at least some of them, are well indexed in Google. However, I wanted to put some of these articles on my new website. As a result, it turned out that despite the fact that the posts were indexed, \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"underline\"}],\"value\":\"they do not appear in the search results at all\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\", and the phrases I would expect them,  they lead to my very old, slow and ugly page 🤨. So this is true that Google doesn't like content copies.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Picture doesn't always matter\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-4\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"I expected articles with photos to be more interesting for the reader. And perhaps it is so. However, for Google it probably doesn't matter, and maybe even better if there are no pictures at all because the page loads faster. Anyway, \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"underline\"}],\"value\":\"pages where I don't have pictures are very well indexed and highly positioned\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\" as well. \",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[],\"nodeType\":\"hr\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"I will write about the next conclusions and observations soon in the next post. In the meantime, to my set of pages in Search Console I am adding another page, which is ... my blog that you are currently reading. Again, I don't want to promote the site in any way. I am very curious how a page written in English with definitely more popular and readable content will be found in the Google search engine.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"document\"}"},"featuredImage":{"fixed":{"src":"//images.ctfassets.net/r1q8fbx9u30m/3ag1vTz05dCPTTHtQWqy16/b3cdb0c766f55297769066454b41d9de/tree.jpg?w=300&q=50"}}}}]},"allContentfulExternalLinks":{"edges":[{"node":{"author":"Dmitri Pavlutin","title":"Use React.memo() wisely","url":"https://dmitripavlutin.com/use-react-memo-wisely/","featuredImage":{"fixed":{"src":"//images.ctfassets.net/r1q8fbx9u30m/5A4dk41koxMDzJJooklxkE/7a667005a3503528116adaa955bb332b/512px-React-icon.svg.png?w=300&q=50"}}}},{"node":{"author":" Florian Rappl","title":"11 Popular Misconceptions About Micro Frontends","url":"https://blog.bitsrc.io/11-popular-misconceptions-about-micro-frontends-d5daecc92efb","featuredImage":{"fixed":{"src":"//images.ctfassets.net/r1q8fbx9u30m/4ZTKowF41oHiKxWCd8rHYC/2d3076992d0dae49d3207f49e9805b6b/javascript-2752148-2284965.png?w=300&q=50"}}}},{"node":{"author":"Lee Warrick","title":"The Problem with React's Context API","url":"https://leewarrick.com/blog/the-problem-with-context/","featuredImage":{"fixed":{"src":"//images.ctfassets.net/r1q8fbx9u30m/5A4dk41koxMDzJJooklxkE/7a667005a3503528116adaa955bb332b/512px-React-icon.svg.png?w=300&q=50"}}}}]},"contentfulElements":{"content":{"content":"Hello! My name is Lukasz Drazewski. I live and work in Poland. I am a frontend developer. After work, I run a lot, read and bake bread. Welcome to my blog."}},"allContentfulAsset":{"nodes":[{"fluid":{"srcSet":"//images.ctfassets.net/r1q8fbx9u30m/76AZsIyvlsregVW3KyF5lu/ab256ceac0ad5a9b1bc0cf574fb7d8a9/ryjek.png?w=200&h=177&q=50 200w,\n//images.ctfassets.net/r1q8fbx9u30m/76AZsIyvlsregVW3KyF5lu/ab256ceac0ad5a9b1bc0cf574fb7d8a9/ryjek.png?w=300&h=266&q=50 300w"}}]}}}